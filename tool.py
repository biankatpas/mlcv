import Tkinter as tkfrom os import listdir, makedirsfrom os.path import join, isfile, isdirfrom PIL import ImageTk, Imageimport jsonrect_id = -1center_pos = [-1, -1]current_label = []output_dir = ''current_img = Nonefilename = Nonefile_index  = 0item_image = Nonebox_dim = [224, 224]config = Nonedef save_image(image_label_var):    global current_label    global current_img    global filename    global box_dim    global config    global output_dir    print('Saving image with label: ' + current_label[0])    img_crop = Image.open(current_img)    if center_pos[0] == -1 and center_pos[1] == -1:        image_label_var.set("Select bounding box before saving")        return    box = (center_pos[0] - box_dim[0] / 2, center_pos[1] - box_dim[1] / 2, center_pos[0] + box_dim[0] / 2, center_pos[1] + box_dim[1] / 2)    output_img = img_crop.crop(box)    #Check if a directory exists in the output folder. If not then create it    if not isdir(join(output_dir, current_label[1])):        makedirs(join(output_dir, current_label[1]))    #Check if the file with the same name exists. If yes, append a number to it    index = 1    new_filename = filename    while (True):        if isfile(join(output_dir, current_label[1], new_filename)):            new_filename = filename.split('.')[0] + '_' + str(index) + '.png'            index = index + 1        else:            break;    output_img.save(join(output_dir, current_label[1], new_filename))    config_file = open('./config', 'w')    config['last_processed'] = filename    json.dump(config, config_file)    config_file.close()def create_image_object(path):    global current_img    current_img = path    img = ImageTk.PhotoImage(Image.open(path))    return imgdef label_selected(label, var):    global current_label    current_label = label    var.set("Selected Label: " + label[0]);def mouseclick_callback(event):    global rect_id    global center_pos    global box_dim    print('Clicked at: ', event.x, event.y)    if rect_id is not -1:        event.widget.delete(rect_id)    c_x = event.x    c_y = event.y    center_pos = [c_x, c_y]    rect_id = event.widget.create_rectangle(c_x - box_dim[0] / 2, c_y - box_dim[1] / 2, c_x + box_dim[0] / 2, c_y + box_dim[1] / 2, outline="red")def load_image(files, dir_path, image_canvas, var, index):    if index < 0:        return    global file_index    global center_pos    global rect_id    global filename    image_canvas.delete(rect_id)    rect_id = -1    center_pos = [-1, -1]    file_index = index    filename = files[file_index]    image_path = join(dir_path, files[file_index])    img = create_image_object(image_path)    image_canvas.itemconfigure(item_image, image = img)    image_canvas.image = imgdef main():        global filename    global current_label    global current_pos    global file_index    global item_image    global box_dim    global config    global output_dir    #Read the config file    config_file = open('./config', 'r')    config = json.load(config_file)    config_file.close()        box_dim = config['bounding_box']    labels = config['labels']    window = tk.Tk()    window.title("Crop Tool")    w, h = window.winfo_screenwidth() - 50, window.winfo_screenheight() - 50    window.geometry("%dx%d+0+0" % (w, h))        dir_path = config['input_dir']     output_dir = config['output_dir']    files = [f for f in listdir(dir_path) if isfile(join(dir_path, f)) and f[0] != '.']    #Sort the given files    files.sort()    try:        file_index = files.index(config['last_processed'])    except ValueError:        file_index = 0    image_path = join(dir_path, files[file_index]) #'/Users/salil/Work/ML/Datasets/HandData/images_7_png/ch01_002281.png'    filename = files[file_index] #'ch01_002281.png'    img = create_image_object(image_path)    image_canvas = tk.Canvas(window, width=img.width(), height=img.height())    item_image = image_canvas.create_image(0, 0, image=img, anchor="nw")    image_canvas.bind("<Button-1>", mouseclick_callback)    image_canvas.pack()        buttons_group = tk.Frame(window)    #Next and Previous button    prev_button = tk.Button(buttons_group, text="Previous", command = lambda: load_image(files, dir_path, image_canvas, image_label_var, file_index -1))    prev_button.pack()    next_button = tk.Button(buttons_group, text="Next", command = lambda: load_image(files, dir_path, image_canvas, image_label_var, file_index + 1))    next_button.pack()    #Adding the save button    save_button = tk.Button(buttons_group, text="Save", command = lambda: save_image(image_label_var))    save_button.pack()        buttons_group.pack()    #Display the selected label    image_label_var = tk.StringVar()    image_label_var.set("Selected Label: none");    image_label = tk.Label(text="Test", textvariable=image_label_var)    image_label.pack()    #Add buttons for image labels    '''    labels = [        ["0 (CN)", "CN_0"],        ["1 (CN)", "CN_1"],        ["2 (CN)", "CN_2"],        ["3 (CN)", "CN_3"]    ]    '''    label_frame_1 = tk.Frame()    for label in labels[:11]:        label_btn = tk.Button(label_frame_1, bg="red", text=label[0], command= lambda label=label: label_selected(label, image_label_var))        label_btn.pack(side="left")    label_frame_1.pack()    label_frame_2 = tk.Frame()    for label in labels[11: 20]:        label_btn = tk.Button(label_frame_2, bg="blue", text=label[0], command= lambda label=label: label_selected(label, image_label_var))        label_btn.pack(side="left")    label_frame_2.pack()    window.mainloop()if __name__ == '__main__':    main()